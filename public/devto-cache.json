[
  {
    "type_of": "article",
    "id": 718744,
    "title": "Have you come across any websites that frustrate you?",
    "description": "Few things what you can do to fix websites.",
    "published": true,
    "published_at": "2021-06-07T00:57:05.190Z",
    "slug": "have-you-come-across-few-websites-that-you-frustrate-hlc",
    "path": "/azrizhaziq/have-you-come-across-few-websites-that-you-frustrate-hlc",
    "url": "https://dev.to/azrizhaziq/have-you-come-across-few-websites-that-you-frustrate-hlc",
    "comments_count": 1,
    "public_reactions_count": 2,
    "page_views_count": 73,
    "published_timestamp": "2021-06-07T00:57:05Z",
    "body_markdown": "---\ntitle: Have you come across any websites that frustrate you?\npublished: true\ndescription: Few things what you can do to fix websites.\ntags: javascript\ncover_image: https://source.unsplash.com/1K9T5YiZ2WU\n---\n\n\nFrustrated because of:\n* Accessibility.\n* Color contrast.\n* Font too small, font type was set to `comic-sans`.\n* Input does not auto-focus. Usually in sign-in page.\n* Can't scroll the website since you have ad-block installed.\n* Cant click disabled element\n* No shortcut key\n* Manually key-in a lot of input forms\n\nFret not, I'll share few things from the list what you can do about it.\n\n### 1. Can't click disabled dropdown/button\n\nUsually I faced this on client-side validation. The dev implement this to ensure and prevent user doing something funny. For your information, this is only on client side validation and let's be honest here, it's not all developer had a time to work on backend validation. So this is where we can take advantage. \n\nMost of the time the DOM will have similar structure like below.\n\n```html\n<!-- copied from w3school -->\n<label for='iphone'>Buy iphone now!!</label>\n\n<select id='iphone'>\n  <option value='6'>6 (only 50 left)</option>\n  <option value='7' disabled>7 (sorry out of stocks)</option>\n  <option value='8'>8</option>\n</select>\n```\n\nYou are dying want to buy iphone 7 but none left. What are we waiting for? just open your devtools and inspect the element using <kbd>CMD</kbd><kbd>SHIFT</kbd><kbd>c</kbd> (mac) or <kbd>CTRL</kbd><kbd>SHIFT</kbd><kbd>c</kbd> (window/linux), and hover to dropdown. After that, just double-click `disable` and delete it. Now try to select and submit the form. If there is no error message then we are all good!!. You can use the same trick with disabled button.\n\nAlso please note that, the dev could also set the element with `user-select: none`. So in this case, just delete that css property.\n\n#### Notes for devs:\n\n- You should really consider working on validation in server side.\n- Write tests, so that you can ship your product with confidence.\n- For client side, add a second validation in javascript if else statement. It's not a perfect solution, but it just so that naughty user have difficult time.\n\n```javascript\nfunction submit(e) {\n  e.preventDefault()\n  \n  if (!isFormValid) {\n    showErrorMessage = true\n  }\n\n  fetch('your-post-url', { method: 'POST' }).then(console.log)\n}\n```\n\n\n### 2. Can't scroll the website since you have ad-block installed.\n\nIf you happen to face this, we are on the same side. Kinda annoying since the website will usually block the scroll and will have big popup modal. So how to overcome this issue is:\n\nInstall this extension\nhttps://chrome.google.com/webstore/detail/user-javascript-and-css/nbhcbdghjpllgmfilhnhkllmkecfmpld.\n\nWhat you can do with this extension is, you can inject your own javascript or css. So in our case here, usually I notice the dev will add `overflow: none` to body.\n\n```css\nbody { overflow: hidden };\n```\n\nSo how we can combat this, here are the steps that you can follow:\n\n1. Make sure you are on the website that you want to overwrite.\n2. Click the extension and click \"add new\"\n![image](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d1vmrdwvhqqf5wj9dfyi.png)\n \n3. It will redirect you to a new tab.\n4. Paste this css into css section\n\n```css\nbody { overflow: unset !important }\n```\n![image](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/epdh9c2lauetayppadja.png)\n \n\n* Easy right? Somehow, not all website are structured like this.\n* Sometimes, it's not the body that is being blocked. It could be 2-3 level children of `<body>`\n* Also, to put this to every website it's not friendly. So in that case, change match url to `*`, it will run to every website. Be warned tho, that this can have side effect tho.\n\n\nHow about the big modal?. You can use something like below to remove the modal. \n\n```javascript\n  document.querySelector('.ads-modal').remove()\n``` \n\nBut it'll be a little bit tricky, since we don't know when the modal is being shown to us. So I'm gonna share you an approach to auto remove the modal.\n\n#### Using mutation observer + promise\nBasic idea with mutation observer is, if there are any changes happen to element that being observe, it will trigger an event. For example if the attributes, classes, children is being mutate, added, or deleted. \n\nThis function is pretty handy and its really use-full especially if you are working on with browser extension. I also happen to use this function in my [extension here](https://github.com/AzrizHaziq/tradingview-syariah-indicator/blob/d3803978a70225ac6e4e4f4171ebb664761821e0/src/helper.js#L163-L181). \n\n```typescript\n// The original of work is from StackOverflow.\nfunction waitForElm(selector) {\n    return new Promise(resolve => {\n      if (document.querySelector(selector)) {\n      \tconsole.log('found')\n        return resolve(document.querySelector(selector))\n      }\n\n      const observer = new MutationObserver(() => {\n        if (document.querySelector(selector)) {\n    \t  console.log('found, observer.disconnect()')\n          resolve(document.querySelector(selector))\n          observer.disconnect()\n        }\n      })\n\n      observer.observe(document.body, {\n        childList: true,\n        subtree: true,\n      })\n    })\n  }\n\n// find the element that you want to delete. \n// Once mutation observer found it, it will resolve and run .remove()\nwaitForElm('.ads-modal').then(x => x.remove())\n```\n\n\n#### Notes for devs\n\nYou can do a lot of stuff to punish users using ad-block.\n\n* You can use this [approach](https://dev.to/codingnepal/detect-adblock-using-html-css-javascript-dkh) by @CodingNepal.\n* Use a [MutationObserver](https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver) to the element you want to observe. Check if the element's attribute or css property is being changed or not, if so then run your custom script.\n* Also there is some other people will use `print mode` to read the content before the big modal popup show up. So in this case, write a custom css print media-queries.\n\n```css \n  @media print { \n    body.user-has-ads-block * { display: none !important }\n  }\n```\n\n* But, if you do like aforementioned above, I'm sure you are not getting any visitor soon 🤣.\n\n### 3. Website does not provide shortcut key\n\nIf you are regular visitor to certain website, and you also happen to click a lot certain buttons/actions, then is a good use case where you can create your own shortcut key. We will use same extension here, and below I would like to share a shortcut key to navigate twitter `<nav>` faster(the left side navigations).\n\n```javascript\n// go to twitter.com, and click \"add new\" at the extension popup. \n// you might want to change the url match to https://twitter.com/**\n// put this script in javascript section\ndocument.body.addEventListener('keyup', function(event) {\n  if (event.ctrlKey) {\n    const navEle = document.querySelector('nav')\n    const noKeyPress = +event.code.replace('Digit', '') // get user key pressed and convert it to number\n\n    // if user click No that larger than menu navigation has, then ignore it.\n    if (noKeyPress > navEle.children.length - 1) {\n      return\n    }\n\n    // click the nav item\n    navEle.children[noKeyPress - 1].click()\n  }\n})\n```\n\nNow that you have set up it, try press <kbd>CTRL</kbd><kbd>2</kbd>, it will navigate you to https://twitter.com/explore. You can customise your shortcut to your own preferences.\n\n## To summarise\n\nSo if you have ever face any frustration with any websites, then just **write a script** for it. You can also get more creative and write script to:\n\n- Automate your stuff. For example, buying hot-deals items which open at a limit time.\n- Execute buy/sell in trade markets (should do with api tho).\n- Stomping noobs in game.\n- For Quality Engineer to test.\n- Find a loophole in website for security purpose.\n\nHope you learn something and thank you for your time.\n\ncover image by: https://unsplash.com/@punttim",
    "positive_reactions_count": 2,
    "cover_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--q4SuzyR4--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://source.unsplash.com/1K9T5YiZ2WU",
    "tag_list": [
      "javascript"
    ],
    "canonical_url": "https://dev.to/azrizhaziq/have-you-come-across-few-websites-that-you-frustrate-hlc",
    "reading_time_minutes": 5,
    "user": {
      "name": "Azriz Jasni",
      "username": "azrizhaziq",
      "twitter_username": null,
      "github_username": "AzrizHaziq",
      "website_url": null,
      "profile_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--C2GJLJGy--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/86582/93c78063-72ac-4713-a4b9-0a7b2fa63de6.jpeg",
      "profile_image_90": "https://res.cloudinary.com/practicaldev/image/fetch/s--QKw4f0Eo--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/86582/93c78063-72ac-4713-a4b9-0a7b2fa63de6.jpeg"
    }
  },
  {
    "type_of": "article",
    "id": 711801,
    "title": "I've been using vim in total a year, and I'll stick to it. ",
    "description": "level up vim with these tips. ",
    "published": true,
    "published_at": "2021-06-05T00:06:19.165Z",
    "slug": "i-ve-been-using-vim-in-total-a-year-and-i-ll-stick-using-it-2e8k",
    "path": "/azrizhaziq/i-ve-been-using-vim-in-total-a-year-and-i-ll-stick-using-it-2e8k",
    "url": "https://dev.to/azrizhaziq/i-ve-been-using-vim-in-total-a-year-and-i-ll-stick-using-it-2e8k",
    "comments_count": 0,
    "public_reactions_count": 7,
    "page_views_count": 131,
    "published_timestamp": "2021-06-05T00:06:19Z",
    "body_markdown": "---\ntitle: I've been using vim in total a year, and I'll stick to it. \npublished: true\ndescription: level up vim with these tips. \ntags: vim, dx, developerexperience \ncover_image: https://source.unsplash.com/wvJuYrM5iuw\n---\n\nAnd heres why:\n* after you learn vim, you will be less pressing <kbd>ALT</kbd>, <kbd>CMD</kbd>, <kbd>CTRL</kbd>, <kbd>HOME</kbd>.\n* you can achieve so many things with less keystrokes\n* vim also can record your commands with macros, so be sure to check it out below.\n\n\n\n\n{% youtube IiwGbcd8S7I %}\n\n{% youtube d8XtNXutVto %}\n\n\n* I'll be sharing few highlights from both of the video above that I feel its very handy. Hence, if you just started to\nlearn how to use vim, please watch both of the video first as my examples below is suitable to someone already familiar\nwith basics(Visual, Editing, Deleting, and Navigating). \n* However, I'll try to make this interactive as much as possible,\nso that anyone could get start easily. Since both of the video is quite long, I have 1 little tip on how to learn faster\non my previous [article](https://dev.to/azrizhaziq/unpopular-opinion-on-learning-approach-119i).\n\n## Few notes before we start:\n\n- First, I've been editing this article for quite long with nested bullet points, and it doesn't really work. The\n  numbering, indentation and some other stuff not properly align. Hence, I'll be using gist since it works fine. Also average reading will be around ~10min instead of 2min.\n- All the char is case-sensitive, and please excuse me if I'm using incorrect term/syntax 😅.\n- Please note that on below example I'll be using a lot of `<cursor here>` to indicate you need to move your cursor\n  somewhere around there.\n- If you see `<enter>` it means you have to press enter. Same goes to `<esc>`.\n- Plus, if you see a formatting like this <kbd>q</kbd>, it means press the 'q' key in keyboard.\n- Lastly, I'm using this awesome [repo](https://github.com/amix/vimrc) for my vim config. \n\nIf you prefer to read in github gist, you can click this link. https://gist.github.com/AzrizHaziq/adcfdbf12c3b30b6523495e19f282b58#file-vim-md\n\n## Let's get started then:\n\n\n{% gist https://gist.github.com/AzrizHaziq/adcfdbf12c3b30b6523495e19f282b58 file=vim.md %}\n\n\n\n- Now that you have learn few things here, why not give it a try first? You might have same hobbies like mine (search\nabove 🤣).\n- Please, don't try to remember all the keys, since vim already have a good mnemonics. \n- However, there is a lot of things that I didn't mention in both of the videos. Hence, I strongly suggest you to watch it. - I hope my example is easy to understand. Let me know if the example is not clear enough for you/typos or anything in comment. Thank you for reading.\n",
    "positive_reactions_count": 7,
    "cover_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--2DXzjmEu--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://source.unsplash.com/wvJuYrM5iuw",
    "tag_list": [
      "vim",
      "dx",
      "developerexperience"
    ],
    "canonical_url": "https://dev.to/azrizhaziq/i-ve-been-using-vim-in-total-a-year-and-i-ll-stick-using-it-2e8k",
    "reading_time_minutes": 2,
    "user": {
      "name": "Azriz Jasni",
      "username": "azrizhaziq",
      "twitter_username": null,
      "github_username": "AzrizHaziq",
      "website_url": null,
      "profile_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--C2GJLJGy--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/86582/93c78063-72ac-4713-a4b9-0a7b2fa63de6.jpeg",
      "profile_image_90": "https://res.cloudinary.com/practicaldev/image/fetch/s--QKw4f0Eo--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/86582/93c78063-72ac-4713-a4b9-0a7b2fa63de6.jpeg"
    }
  },
  {
    "type_of": "article",
    "id": 708803,
    "title": "Unpopular opinion on learning approach.",
    "description": "Learn 2x time faster than your peers, give it a try first.",
    "published": true,
    "published_at": "2021-06-02T08:54:28.746Z",
    "slug": "unpopular-opinion-on-learning-approach-119i",
    "path": "/azrizhaziq/unpopular-opinion-on-learning-approach-119i",
    "url": "https://dev.to/azrizhaziq/unpopular-opinion-on-learning-approach-119i",
    "comments_count": 0,
    "public_reactions_count": 3,
    "page_views_count": 104,
    "published_timestamp": "2021-06-02T08:54:28Z",
    "body_markdown": "---\ntitle: Unpopular opinion on learning approach.\npublished: true\ndescription: Learn 2x time faster than your peers, give it a try first.\ntags: learnfaster\ncover_image: https://source.unsplash.com/CiUR8zISX60\n---\n\nHave you ever seen a scene in Dragon Ball where Goku went on training in other dimension? If you didn't you can watch below\n\n{% youtube _Ib0avVtpEg %}\n\nThe idea is, you get to train 1year in other dimension which is equal to 1 day in earth. But can we apply the same to our real world?\n\n> Yes, but there is trade off.\n\nYou can achieve this when watching a video or listening to audio. But, in this article, I would like to share more on video, since I'm rarely listen to any audio(podcast etc...)\n\nHave you notice that Youtube have `Playback Speed`. You can find this at youtube's gear icon(bottom right side) and then click `Playback Speed` and it will show you a list of options which is `0.25, 0.5, 0.75, 1, 1.25, 1.5, 1.75, 2`. Try to change it to `2`. The video play faster right?.\n\nAt first it's quite hard to understand some of the content creator's message or when they communicate and you have to really focus and listen carefully what they said. You can set to `1.25` first and then, after few trials, try set to `2`.\n\nImagine that you are watching a video 30min long, and if you set the speed to `2`, averagely you only watched the video in ~15min long instead of 30min and this save you 50% of time.\n\n```md\n// formula\nvideoLength/playbackSpeed = new total video \n30min/2 = ~15min\n```\n\nIn other words, if you allocate 1hour to learn everyday, you can actually enjoy learning up to 2hour of content while other people only spend 1hour!!. Unfortunately its not 1 to 1 mapping with Dragon Ball, but this is good enough.\n\nRemember when I mention that there is `trade off`. Yes, it does have trade off as follows:\n* Sometime its hard to listen the video clearly.\n* You might miss the essential part of the video. And usually if I didn't understand it, I had to go back to previous frame multiple times.\n* You need to have a good internet connections as well as CPU and RAM (I'll explain down below why)\n* Generally, if you are learning something that is not in your expertise, sometime it's hard to understand few keywords/jargon that they are using. I experience this a lot when learning finance terms. It is very challenging path.\n* Depend on content creator effort. Creating a content it's not an easy task. It require huge passion to create a video.\n(Please thumbs up creator's video, they'll feel appreciated)\n* Can't really rely everything you learn in youtube. Might be misleading. Hence, still need to have other resources.\n\nHowever, I believe that, the PRO out-weight the CONS:\n* **Save you a lot of time** and you can spend learning other things as well.\n* If you didn't understand a word in a video, you can just search another video with the same content. You might be able to understand the next one.\n* Huge benefit if someone who would like to sharpen their practical skill. Cooking, sewing, renovate, makeover room to name a few. In some cases, you don't really need to hear the audio at all.\n\nLastly, this is just **my opinion** and do give it a try. Who know you might like it.\n\n## Now that we are done with theories let proceed to, how behind the scene is done with Javascript.\n\nUsually a video will render in this kind of element in DOM, while for audio is `<audio>`\n```html\n// taken from youtube html and stripped few things\n<video class=\"video-stream html5-main-video\" src=\"blob:https://www.youtube.com/...id\"></video>\n```\n\nSo how do we change the playback speed rate? Every `<video>` and `<audio>` element exposed a `playbackRate` getter and setter. You can set this to any speed. 3, 4, 5, 6 and so on... its your call. Just be aware that, higher the number might hang your browser since its your browser doing the work. \n\nLet's get hand dirty with javascript. Open the `console` in Devtool and paste this. It will find all video element and set the playbackRate to 2. This is useful if the website still didn't implement playback rate like in facebook, twitter, vimeo, netflix and etc...\n\n[MDN Doc](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/playbackRate)\n```js\ndocument.querySelectorAll('video')\n        .forEach(i => i.playbackRate = 2)\n```\n\nBut to write this code to every website and open Devtool its not cool. And I want to share 1 extension tools that I used. Just install it and press `s` to slower, and `d` to faster. And you can set the speed more than `2`. You can find other extension tho, I'm just lazy to try others 🤣.\n\nVideo Speed Controller\n- https://chrome.google.com/webstore/detail/video-speed-controller/nffaoalbilbmmfgbnbgppjihopabppdk\n- https://github.com/igrigorik/videospeed\n\nHope you enjoy this article and learn something.\n\nimage source: [jakobowens1](https://unsplash.com/@jakobowens1)",
    "positive_reactions_count": 3,
    "cover_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--r9LtzjGb--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://source.unsplash.com/CiUR8zISX60",
    "tag_list": [
      "learnfaster"
    ],
    "canonical_url": "https://dev.to/azrizhaziq/unpopular-opinion-on-learning-approach-119i",
    "reading_time_minutes": 4,
    "user": {
      "name": "Azriz Jasni",
      "username": "azrizhaziq",
      "twitter_username": null,
      "github_username": "AzrizHaziq",
      "website_url": null,
      "profile_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--C2GJLJGy--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/86582/93c78063-72ac-4713-a4b9-0a7b2fa63de6.jpeg",
      "profile_image_90": "https://res.cloudinary.com/practicaldev/image/fetch/s--QKw4f0Eo--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/86582/93c78063-72ac-4713-a4b9-0a7b2fa63de6.jpeg"
    }
  },
  {
    "type_of": "article",
    "id": 708194,
    "title": "How self-xss work in bookmark.",
    "description": "How self-xss work in bookmark and how you can prevent it",
    "published": true,
    "published_at": "2021-05-29T01:39:15.601Z",
    "slug": "how-self-xss-work-in-bookmark-15ok",
    "path": "/azrizhaziq/how-self-xss-work-in-bookmark-15ok",
    "url": "https://dev.to/azrizhaziq/how-self-xss-work-in-bookmark-15ok",
    "comments_count": 0,
    "public_reactions_count": 6,
    "page_views_count": 102,
    "published_timestamp": "2021-05-29T01:39:15Z",
    "body_markdown": "---\ntitle: How self-xss work in bookmark.\npublished: true\ndescription: How self-xss work in bookmark and how you can prevent it\ntags: xss, javascript, bookmark\ncover_image: https://source.unsplash.com/eMemmpUojlw\n---\n\nOn my previous [article](https://dev.to/azrizhaziq/github-on-steroids-3d23), I share on how to add javascript code in bookmark which later user can just click on it and browser will run it. And after published the article, I had another idea of writing this article. Before I share my findings, I would like to share with the audience what is the definition of `Self-XSS`.\n\n> Self-XSS operates by tricking users into **copying and pasting** malicious content into their browsers' web developer console\n###### wikipedia\n\n\n## So let's continue on our example.\n\n1. First let setup our bookmark script. But before you copy the code, let me brief what the code does. \n\n```js\njavascript: ((url) =>\n  fetch(url)\n    .then((response) => response.text())\n    .then((scriptInString) => eval(scriptInString))\n    /* .then(scriptInString => new Function(scriptInString)()) */\n)(`https://gist.githubusercontent.com/AzrizHaziq/adcfdbf12c3b30b6523495e19f282b58/raw/a959157530b4c282aae0386fda1b3c3b1656bb7d/notify.js`);\n```\n\nFirst we wrap our code in IIFE. Which mean it will execute it right away. Also I used it because, I want to avoid naming a function. Hence, it will make shorter scripts.\n\nNext, we use fetch to trigger **http GET**(pun intended) to our script. Once the http is resolve, we want to convert it to **string**. And finally, since our script is in the form of string, we can **eval**uate it with `eval` or `new Function`.\n\nAnd the snippet code in [github gist](https://gist.github.com/AzrizHaziq/adcfdbf12c3b30b6523495e19f282b58#file-notify-js) is exactly like below \n```js\n// notify.js in gist github\n// code copied from https://developer.mozilla.org/en-US/docs/Web/API/notification\n// and was changed into iife\n\n(() => {\n  // Let's check if the browser supports notifications\n  if (!(\"Notification\" in window)) {\n    alert(\"This browser does not support desktop notification\");\n  }\n\n  // Let's check whether notification permissions have already been granted\n  else if (Notification.permission === \"granted\") {\n    // If it's okay let's create a notification\n    var notification = new Notification(\"Hi there!\");\n  }\n\n  // Otherwise, we need to ask the user for permission\n  else if (Notification.permission !== \"denied\") {\n    Notification.requestPermission().then(function (permission) {\n      // If the user accepts, let's create a notification\n      if (permission === \"granted\") {\n        var notification = new Notification(\"Hi there!\");\n      }\n    });\n  }\n\n  // At last, if the user has denied notifications, and you\n  // want to be respectful there is no need to bother them any more.\n})()\n```\n\nOnce you save into bookmark it will look like this:\n![image](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5h77x4u5nm89161d4ap8.png) \n\n2. Go to https://example.com.\n3. Just for the sake of this example, please `allow` notification. Since our script in gist will trigger notification. (For chrome, click the padlock icon in url bar and Allow notification)\n4. Click the bookmark that you just create. \n5. If you didn't see the notification then that's mean, I can panic 🤣🤣. If yes, well done you follow the steps correctly 😀.\n6. You can block notification, and delete the bookmark too. \n\nNow of course this example does not have big impact to you, since my objective is to make it interactive. But, I would like to highlight one thing here. \n\n> Imagine that if let say after a few month or years after I published this article, I can just silently edit my `notify.js` to any nasty code. Anyone who click the bookmark  usually would assume it just the same old script and will fall into my trap. Pretty slick right?\n\nThere is also another scenario I want to share. In future, we will have [read & write permission](https://web.dev/browser-fs-access/) in browser. What will happen if you just blindly run a script that you copy and paste? That script may hog your file-size, plant a malware, read sensitive file, and it could be anything else.\n\n## As developer, how do you prevent this\nThis example work because at time of me writing this article https://example.com doesn't have [CSP protection](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP). CSP is big topic which I'm not an expert. It has a lot of configs and in case this is your first time hearing it, let me try to give a tldr(too long didn't read). \n\n> Explicitly define what kind of tasks/scrips/images/domain/styles/things that can run/load in your document. (psst: I might be wrong, please correct me 🙂)\n\nFor example:\n- Let say I'm on https://example.com\n- I also specify images to load only from https://unsplash.com. \n- And if there is a request to different domain then it will trigger CSP error in Devtools.\n\n```html\n<!-- these should load fine in dom -->  \n<img src=\"https://example.com/static/logo.png\"> \n<img src=\"https://unsplash.com/static/my-image.png\"> \n\n<!-- CSP errors and it will not load -->  \n<img src=\"https://s3.aws.com/bucket...\">\n\n// please check the MDN doc as it is more detail example\n```\n\nJust in case if you click the bookmark while you are currently in `twitter.com` it will not trigger the notification since `twitter.com` already have CSP layer. And if you want to see how they implement it, you can go to network tool and look at the first downloaded document, then look for `content-security-policy` in response header. You will be surprise to see how long it is.\n\n![twitter CSP](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ct51pj8xlm2e7b7fz5t.png) \n\n\n## In Conclusion.\n* Please be aware **copying and pasting** any code from online. Especially obfuscated code.\n* Please take you time understand the code. Any term or keyword that you never heard of it just search in MDN or google.\n\n\nOriginally, the idea for this article is coming from [DebugCSS](http://imbrianj.github.io/debugCSS/). After I knew how they implement it and ensure that every user who click it, will always run the latest version, I just write a draft for this article. For you information, while they are using <style> and inject to dom, mine was using http get and eval the script.\n\nImage Source: [firmbee](https://unsplash.com/@firmbee)",
    "positive_reactions_count": 6,
    "cover_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--6vhkS6eX--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://source.unsplash.com/eMemmpUojlw",
    "tag_list": [
      "xss",
      "javascript",
      "bookmark"
    ],
    "canonical_url": "https://dev.to/azrizhaziq/how-self-xss-work-in-bookmark-15ok",
    "reading_time_minutes": 4,
    "user": {
      "name": "Azriz Jasni",
      "username": "azrizhaziq",
      "twitter_username": null,
      "github_username": "AzrizHaziq",
      "website_url": null,
      "profile_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--C2GJLJGy--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/86582/93c78063-72ac-4713-a4b9-0a7b2fa63de6.jpeg",
      "profile_image_90": "https://res.cloudinary.com/practicaldev/image/fetch/s--QKw4f0Eo--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/86582/93c78063-72ac-4713-a4b9-0a7b2fa63de6.jpeg"
    }
  },
  {
    "type_of": "article",
    "id": 703645,
    "title": "Github on Steroids ",
    "description": "Improve github experience with octotree, github1s, githubsurf, and githistory",
    "published": true,
    "published_at": "2021-05-21T14:22:39.191Z",
    "slug": "github-on-steroids-3d23",
    "path": "/azrizhaziq/github-on-steroids-3d23",
    "url": "https://dev.to/azrizhaziq/github-on-steroids-3d23",
    "comments_count": 0,
    "public_reactions_count": 6,
    "page_views_count": 150,
    "published_timestamp": "2021-05-21T14:22:39Z",
    "body_markdown": "---\ntitle: Github on Steroids \npublished: true\ndescription: Improve github experience with octotree, github1s, githubsurf, and githistory\ntags: Github, developerexperience, dx, debugging\ncover_image: https://source.unsplash.com/gnyA8vd3Otc\n---\n\nHi everyone, I have few tips on how to increase productivity with Github. \n\n\n## Navigating through source codes in repository\nOften time when we open any repository in Github we will be displayed with root folders and files. But, what if you want to navigate deep nested file? You would have to navigate through each nested folder until you find the file you want to open. \n\nIt's not really efficient way since every click to folder its actually trigger a lot of network calls, waiting for it to resolve and then browser render it to UI(user interface). And imagine that you are currently on slow 3G connection, you would have wasting your time waiting and clicking.\n\nThere are other points that can be added up but its not the objective of this article. So there are 2 way that I can recommend you:\n\n## 1. [Octotree](https://www.octotree.io/) (freemium)\nIt is a browser extension and they support a lot of browsers(please check their website). For me, their killer feature is **Code Review** and **multiple tabs** 🙂. It's much easier when reviewing your peer PR(pull request). Please refer their main website for services that they provide.\n\n{% youtube tyUNy-WFs-c %}\n\n\n## 2. [Github 1s](https://github.com/conwnet/github1s)\nThis is another level of navigating thru all the files and folder. Just add `1s` to the domain from `github.com` to `github1s.com`. Then you will see vscode in your browser. \n\n```\nfrom https://github.com/facebook/react\nto   https://github1s.com/facebook/react\n```\n\nCool right!. But I would like to highlight 1 more interesting thing, which is how to improve your workflow. Based on their readme, they share a shortcut key with a click in your bookmark, and here how would you setup it.\n\n1. Since I'm using chrome go to `chrome://bookmarks`\n2. Then click 3 dots icon on your most top right\n3. Create a bookmark and enter this line of code to URL input box. For name you can named it yourself (I named it Github1s)\n```js\njavascript: window.location.href = window.location.href.replace(/github(1s)?.com/, function(match, p1) { return p1 ? 'github.com' : 'github1s.com' })\n```\n\n4. It will look like this\n![bookmark github1s.com](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nvxfhm7q0rqjvqpz8mu3.png)\n5. Once that done, now feel free to open any repo and click the bookmark that you just created. \n[Github ReactJS](https://github.com/facebook/react)\n[Github1s ReactJS](https://github1s.com/facebook/react)\n\nAnother alternative for this is [Github Surf](https://github.com/surfcodes/surf)\n\n\n## Look at file history interactively\n\nSometime you want to know what changes have been made to a file. Github do have a history button for a file, but In my opinion, it's not really detail and still have to click a a lot of things. Luckily there is another awesome tool [Git History](https://githistory.xyz/)\n\nWe will use this ReactJS package.json file as for our example. Same thing like above, you want to change the url domain.\n```\nfrom https://github.com/repo/path/to/file\nto   https://githistory.xyz/repo/path/to/file\n```\nTo make it easier for the audience to click, you can play around below links\n\n\n- https://github.com/facebook/react/blob/master/package.json\n- https://githistory.xyz/facebook/react/blob/master/package.json\n\n###### Please use keyboard arrow right and left to navigate and for mobile user you can drag left and right as well.\n\n\n![githistory.xyz reactjs package.json file](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g3rn9dfvfw06ejx04lsz.png)\n \n\nAnd lastly, you also can create a bookmark and below is the code. Please refer the step above.\n\n```js\njavascript: window.location.href =   `https://${window.location.hostname === 'github.com' ? 'githistory.xyz' : 'github.com' }${window.location.pathname}`\n```\n\n## 3. [Github] New update!, Github have built in editor\nJust click <kbd>.</kbd>\n\n{% twitter 1425505817827151872 %}\n\n\nHope you enjoy reading it, Thank you.\n\n\n\n\n\n\n\n",
    "positive_reactions_count": 6,
    "cover_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--uIMJHnor--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://source.unsplash.com/gnyA8vd3Otc",
    "tag_list": [
      "github",
      "developerexperience",
      "dx",
      "debugging"
    ],
    "canonical_url": "https://dev.to/azrizhaziq/github-on-steroids-3d23",
    "reading_time_minutes": 3,
    "user": {
      "name": "Azriz Jasni",
      "username": "azrizhaziq",
      "twitter_username": null,
      "github_username": "AzrizHaziq",
      "website_url": null,
      "profile_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--C2GJLJGy--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/86582/93c78063-72ac-4713-a4b9-0a7b2fa63de6.jpeg",
      "profile_image_90": "https://res.cloudinary.com/practicaldev/image/fetch/s--QKw4f0Eo--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/86582/93c78063-72ac-4713-a4b9-0a7b2fa63de6.jpeg"
    }
  },
  {
    "type_of": "article",
    "id": 281995,
    "title": "Better way to unsubscribe in Angular",
    "description": "You might be wondering why do we need to unsubscribe every subscriptions. Well, you can get the ans...",
    "published": true,
    "published_at": "2020-03-16T01:48:09.150Z",
    "slug": "better-way-to-unsubscribe-in-angular-4dcl",
    "path": "/azrizhaziq/better-way-to-unsubscribe-in-angular-4dcl",
    "url": "https://dev.to/azrizhaziq/better-way-to-unsubscribe-in-angular-4dcl",
    "comments_count": 0,
    "public_reactions_count": 14,
    "page_views_count": 1779,
    "published_timestamp": "2020-03-16T01:48:09Z",
    "body_markdown": "---\ntitle: Better way to unsubscribe in Angular\npublished: true\ndescription: \ntags: rxjs, angular, typescript\n---\n\n---\nYou might be wondering why do we need to unsubscribe every subscriptions. Well, you can get the answer from our friend here [Netanel Basal](https://netbasal.com/why-its-important-to-unsubscribe-from-rxjs-subscription-a7a6455d6a02). He have a nice .gif example so check it out.\n\n\nAs time goes on, we(developer) really tired of keep repeating the same process:\n\n```\n1. Importing ngOnDestroy,\n2. Implement the interface\n3. Create public function ngOnDestroy() { … }\n4. Create a variables to keep list of subscriptions\n5. … \n6. …\n7. And repeat the whole process for other components.\n```\n\nThis is tedious and a waste productivity.\nSo, I'm going to share a 2 approach on how to unsubscribe subscription easily. But let's start with normal approach.\n\n\n---\n\n## 1. Using Inheritance\n\n\nCreate a BaseComponent so that, whoever extends this component are able to easily add subscription and easily unsubscribe on destroy.\n\n{% gist https://gist.github.com/AzrizHaziq/837befe71d64d5e73ae540e981ded24a file=base-inheritence.ts %}\n\n\nAnd this is how to implement in component class.\n\n{% gist https://gist.github.com/AzrizHaziq/837befe71d64d5e73ae540e981ded24a file=child-inheritence.component.ts %}\n\n\nOne caveat tho, if the component extends BaseComponent and it also have implement ngOnDestroy() you would have to add super.ngOnDestroy();\n\n{% gist https://gist.github.com/AzrizHaziq/837befe71d64d5e73ae540e981ded24a file=any-child.ts %}\n\n\n## 2. Decorators\n\nI think this approach kinda complicated a little bit as it mutate prototype. BTW i'm using [mixin](https://javascript.info/mixins) approach. Plus is not battle tested with `this`.\n\n{% gist https://gist.github.com/AzrizHaziq/837befe71d64d5e73ae540e981ded24a file=base-decorator.ts %}\n\n\nAnd here how to implement it\n\n{% gist https://gist.github.com/AzrizHaziq/837befe71d64d5e73ae540e981ded24a file=child-decorator.component.ts %}\n\nThats all, feel free to play around here.\n\n{% stackblitz better-way-to-unsubscribe-in-angular view=both %}\n\n### Update\n- Decorator approach with previous example it doesn't really work\n- Added `once` method to auto close the subscription. Can be really help full for something like click button, then trigger one http, and after that close it. (save your time to import `take`)\n- Added type to functions params and return\n- I'm still having difficulty with the return type in Decorator approach. Any typescripts master, please help me with this.",
    "positive_reactions_count": 14,
    "cover_image": null,
    "tag_list": [
      "rxjs",
      "angular",
      "typescript"
    ],
    "canonical_url": "https://dev.to/azrizhaziq/better-way-to-unsubscribe-in-angular-4dcl",
    "reading_time_minutes": 2,
    "user": {
      "name": "Azriz Jasni",
      "username": "azrizhaziq",
      "twitter_username": null,
      "github_username": "AzrizHaziq",
      "website_url": null,
      "profile_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--C2GJLJGy--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/86582/93c78063-72ac-4713-a4b9-0a7b2fa63de6.jpeg",
      "profile_image_90": "https://res.cloudinary.com/practicaldev/image/fetch/s--QKw4f0Eo--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/86582/93c78063-72ac-4713-a4b9-0a7b2fa63de6.jpeg"
    }
  },
  {
    "type_of": "article",
    "id": 105274,
    "title": "Secure your apps with Angular Directive when using target='_blank'",
    "description": "Best way to secure you apps when using target='_blank'",
    "published": true,
    "published_at": "2019-05-01T10:16:41.253Z",
    "slug": "secure-your-apps-with-angular-directive-for-target-blank-fi9",
    "path": "/azrizhaziq/secure-your-apps-with-angular-directive-for-target-blank-fi9",
    "url": "https://dev.to/azrizhaziq/secure-your-apps-with-angular-directive-for-target-blank-fi9",
    "comments_count": 4,
    "public_reactions_count": 10,
    "page_views_count": 5662,
    "published_timestamp": "2019-05-01T10:16:41Z",
    "body_markdown": "---\ntitle: Secure your apps with Angular Directive when using target='_blank'\npublished: true\ndescription: Best way to secure you apps when using target='_blank'\ntags: security, frontend, angular\n---\n    \nHi, today I want to share with you guys on how to secure your apps if you are using `target='_blank'`.\n\nUsually to link an external url, we will do something like this:\n`<a href='https://dev.to'>Dev.to</a>`.Please noted that this will still work. But unfortunately there is an security issues here.You can read more about it here and it also included with example:\nhttps://mathiasbynens.github.io/rel-noopener/#hax\n\nTo solve this issue we can simply add an extra attribute to anchor tag.\n`<a href='https://dev.to' rel='noopener noreferrer'>Dev.to</a>`.\n\nHowever, let say in our app we have a lot of external link to put.\nAnd personally, I dont really like to write `rel='noopener noreferrer'` to every anchor tag I have.\n\nWith that, we can automatically add `rel='noopener noreferrer'` to every anchor tag with Angular Directive.\n\n```js\n// target-blank.directive.ts\n\nimport { Directive, HostBinding } from '@angular/core';\n\n@Directive({\n  // target every <a target=\"_blank\">...<a>\n  selector: 'a[target=_blank]',\n})\nexport class TargetBlankDirective {\n  // will add <a ... rel='noopener noreferrer'>...</a>\n  @HostBinding('attr.rel') rel = 'noopener noreferrer';\n}\n```\n\n```html\n// and just use it like this\n<a href='someurl' target='_blank'>someurl</a>\n\n// will render like this\n<a href='someurl' target='_blank' rel='noopener noreferrer'>someurl</a>\n```\n\nOne last thing, let say you have dynamic action on click. How would we want to prevent this.\n\n```js\nfunction openInNewTab(url: string): void {\n    // open link in new tab\n    const newTab = window.open(url, '_blank')\n\n    // set opener to null so that no one can references it\n    newTab.opener = null\n}\n\nopenInNewTab('https://dev.to')\n```\n\nYou can play around here \n{% stackblitz angular-target-blank %}\n\n\nIn conclusion: \n\n| Pro                                         | Cons                                              |\n|---------------------------------------------|---------------------------------------------------|\n| Automatically add rel='noopener noreferrer' | New Developer unaware of this directive behaviour |\n| Able to prevent this issue automatically    | Client disable JS                                                  |\n\nYou can read more here \nhttps://www.pixelstech.net/article/1537002042-The-danger-of-target%3D_blank-and-opener\n\n\n\n\n\n\n",
    "positive_reactions_count": 10,
    "cover_image": null,
    "tag_list": [
      "security",
      "frontend",
      "angular"
    ],
    "canonical_url": "https://dev.to/azrizhaziq/secure-your-apps-with-angular-directive-for-target-blank-fi9",
    "reading_time_minutes": 2,
    "user": {
      "name": "Azriz Jasni",
      "username": "azrizhaziq",
      "twitter_username": null,
      "github_username": "AzrizHaziq",
      "website_url": null,
      "profile_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--C2GJLJGy--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/86582/93c78063-72ac-4713-a4b9-0a7b2fa63de6.jpeg",
      "profile_image_90": "https://res.cloudinary.com/practicaldev/image/fetch/s--QKw4f0Eo--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/86582/93c78063-72ac-4713-a4b9-0a7b2fa63de6.jpeg"
    }
  },
  {
    "type_of": "article",
    "id": 63377,
    "title": "Inspect Stateless Component Props in ReactJs",
    "description": "Inspe in React",
    "published": true,
    "published_at": "2018-11-17T05:58:51.324Z",
    "slug": "inspect-stateless-component-props-in-reactjs-501a",
    "path": "/azrizhaziq/inspect-stateless-component-props-in-reactjs-501a",
    "url": "https://dev.to/azrizhaziq/inspect-stateless-component-props-in-reactjs-501a",
    "comments_count": 0,
    "public_reactions_count": 8,
    "page_views_count": 1049,
    "published_timestamp": "2018-11-17T05:58:51Z",
    "body_markdown": "---\r\ntitle: Inspect Stateless Component Props in ReactJs\r\npublished: true\r\ndescription: Inspe in React\r\ntags: debugging, javascript, reactjs, rxjs\r\n---\r\n\r\nHi, recently I've shared my tips in javascript, [checkout here](https://dev.to/azrizhaziq/tip-when-in-javascript-497f). On the last section, I did mention how do you debug using `console.log`. \r\n\r\nSo today, I'm going to share a little bit the same concept but it will be in ReactJs context. I hope it will useful for us 😊.\r\n\r\nIn my previous post, you can log current params of a callback function with\r\n`console.log(data) || ...someFn()`\r\n\r\n```javascript\r\n   const nameAndEmails = users.map((user) => console.log(user) || ({ \r\n    name: user.name, \r\n    email: user.email \r\n   }))\r\n```\r\n\r\nIn ReactJs, especially for stateless components, sometime our coworker didn't write any [PropTypes](https://reactjs.org/docs/typechecking-with-proptypes.html). Hence, it a little bit hard to know what kind of `props` shape it will receive. \r\n\r\nLets jump to the example: \r\n\r\n```javascript\r\n// let say you have this kind of component\r\nconst Button = (props) => (\r\n    <button class=\"btn btn-primary\" type=\"button\" {...props} >\r\n        {`${props.children}`}    \r\n    </button>\r\n);\r\n\r\n// use it like this \r\n<Button type=\"Submit\">Click Me</Button>\r\n```\r\n\r\nYou would not want to convert this component into `{ ... return (); }`, because it requires a lot of typing, like this: \r\n\r\n```javascript\r\n// 😓, need to type aloot of things here\r\nconst Button = (props) => {\r\n    console.log(props);\r\n\r\n    return (\r\n        <button class=\"btn btn-primary\" type=\"button\" {...props} >    \r\n           {`${props.children}`}\r\n        </button>\r\n    );\r\n};\r\n```\r\n\r\nSo, instead of convert to ordinary function, you can try this approach to log the `props`.\r\n\r\n```javascript\r\nconst Button = (props) => console.log(props) || (\r\n     <button class=\"btn btn-primary\" type=\"button\" {...props}>\r\n        {`${props.children}`}\r\n     </button>\r\n);\r\n\r\n// It will logs: \r\n// { \r\n//    type: 'Submit',\r\n//    children: 'Click Me'\r\n// }\r\n```\r\n\r\nEssentially, you can use this trick to any callback function like in `map.`, `.filter`, `.reduce`\r\n\r\nI hope you get the idea, See you next time.\r\n\r\n",
    "positive_reactions_count": 8,
    "cover_image": null,
    "tag_list": [
      "debugging",
      "javascript",
      "react",
      "rxjs"
    ],
    "canonical_url": "https://dev.to/azrizhaziq/inspect-stateless-component-props-in-reactjs-501a",
    "reading_time_minutes": 2,
    "user": {
      "name": "Azriz Jasni",
      "username": "azrizhaziq",
      "twitter_username": null,
      "github_username": "AzrizHaziq",
      "website_url": null,
      "profile_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--C2GJLJGy--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/86582/93c78063-72ac-4713-a4b9-0a7b2fa63de6.jpeg",
      "profile_image_90": "https://res.cloudinary.com/practicaldev/image/fetch/s--QKw4f0Eo--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/86582/93c78063-72ac-4713-a4b9-0a7b2fa63de6.jpeg"
    }
  },
  {
    "type_of": "article",
    "id": 62123,
    "title": "Tips in Javascript",
    "description": "Write better and efficient way console.log",
    "published": true,
    "published_at": "2018-11-12T14:15:20.241Z",
    "slug": "tip-when-in-javascript-497f",
    "path": "/azrizhaziq/tip-when-in-javascript-497f",
    "url": "https://dev.to/azrizhaziq/tip-when-in-javascript-497f",
    "comments_count": 3,
    "public_reactions_count": 7,
    "page_views_count": 67,
    "published_timestamp": "2018-11-12T14:15:20Z",
    "body_markdown": "---\r\ntitle: Tips in Javascript\r\npublished: true\r\ndescription: Write better and efficient way console.log\r\ntags: javascript, console.log, debugging\r\n---\r\n\r\nHi and greetings. So today I would like to share some different way when writing `console.log`. You can freely copy the code and paste it on your browser's devtool. \r\n\r\n\r\nAt the time I'm writing, I was using Chrome 70. We will be using JSON response from this awesome service [JSONPlaceholder](https://jsonplaceholder.typicode.com/). Also noted that I'm going to use [Javascript ESNext](https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/ECMAScript_Next_support_in_Mozilla) syntax.\r\n\r\n```javascript\r\n  // this will be our dummy data list of users\r\n  const users = [\r\n  {\r\n    \"id\": 1,\r\n    \"name\": \"Leanne Graham\",\r\n    \"username\": \"Bret\",\r\n    \"email\": \"Sincere@april.biz\",\r\n    \"address\": {\r\n      \"street\": \"Kulas Light\",\r\n      \"suite\": \"Apt. 556\",\r\n      \"city\": \"Gwenborough\",\r\n      \"zipcode\": \"92998-3874\",\r\n      \"geo\": {\r\n        \"lat\": \"-37.3159\",\r\n        \"lng\": \"81.1496\"\r\n      }\r\n    },\r\n    \"phone\": \"1-770-736-8031 x56442\",\r\n    \"website\": \"hildegard.org\"\r\n  },\r\n  {\r\n    \"id\": 2,\r\n    \"name\": \"Ervin Howell\",\r\n    \"username\": \"Antonette\",\r\n    \"email\": \"Shanna@melissa.tv\",\r\n    \"address\": {\r\n      \"street\": \"Victor Plains\",\r\n      \"suite\": \"Suite 879\",\r\n      \"city\": \"Wisokyburgh\",\r\n      \"zipcode\": \"90566-7771\",\r\n      \"geo\": {\r\n        \"lat\": \"-43.9509\",\r\n        \"lng\": \"-34.4618\"\r\n      }\r\n    },\r\n    \"phone\": \"010-692-6593 x09125\",\r\n    \"website\": \"anastasia.net\"\r\n  },\r\n  {\r\n    \"id\": 3,\r\n    \"name\": \"Clementine Bauch\",\r\n    \"username\": \"Samantha\",\r\n    \"email\": \"Nathan@yesenia.net\",\r\n    \"address\": {\r\n      \"street\": \"Douglas Extension\",\r\n      \"suite\": \"Suite 847\",\r\n      \"city\": \"McKenziehaven\",\r\n      \"zipcode\": \"59590-4157\",\r\n      \"geo\": {\r\n        \"lat\": \"-68.6102\",\r\n        \"lng\": \"-47.0653\"\r\n      }\r\n    },\r\n    \"phone\": \"1-463-123-4447\",\r\n    \"website\": \"ramiro.info\"\r\n  }\r\n]   \r\n```\r\n   \r\nWe have a dummy data called `users` and we only interested in user's `name`     and `email`. [Array.prototype.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map) come to the rescue.\r\n\r\n\r\n```javascript\r\n    \r\n    const nameAndEmails = users.map(user => {\r\n        return {\r\n            name: user.name,\r\n            email: user.email,\r\n        };\r\n    })\r\n\r\n/*\r\n  [\r\n    {\r\n      \"name\": \"Leanne Graham\",\r\n      \"email\": \"Sincere@april.biz\"\r\n    },\r\n    {\r\n      \"name\": \"Ervin Howell\",\r\n      \"email\": \"Shanna@melissa.tv\"\r\n    },\r\n    {\r\n      \"name\": \"Clementine Bauch\",\r\n      \"email\": \"Nathan@yesenia.net\"\r\n    }\r\n  ]\r\n\r\n*/\r\n    \r\n```\r\n\r\nYay, the result we get contains `name` and `email`. But we can write this better and shorter syntax with [object literal expression](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions#Advanced_Syntax) and [destructuring](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment)\r\n\r\n```javascript\r\n    // 👍 implicitly return object literal expression\r\n    const nameAndEmails = users.map(user => ({\r\n      name: user.name,\r\n      email: user.email,\r\n    }))\r\n\r\n\r\n    // 👍👍destructuring function parameter and return object literal expression\r\n    const nameAndEmails = users.map(({ name, email }) => ({ name, email }))\r\n```\r\n\r\nOk, lets pretend that after 1 months after coding this code, there is a high chances that you already forgot the `User Shape`, and you might also need to return user's phone number. So we need to `console.log` so that we can have a look at our `User Shape` again.  \r\n\r\n```javascript\r\n   // 1) Write console.log(users) before running the function.\r\n   console.log(users);\r\n   const nameAndEmails = users.map(({ name, email }) => ({ name, email }))\r\n\r\n   // 2) Open devtool and reload the browser\r\n   // 3) Lastly, look at the logged `users` \r\n```\r\n\r\nAs for me this approach is kinda tiresome and below is approach that I found in the internet.\r\n\r\n```javascript\r\n   const nameAndEmails = users.map((user) => console.log(user) || ({ \r\n        name: user.name, \r\n        email: user.email\r\n   }))\r\n\r\n   or \r\n  \r\n   const nameAndEmails = users.map(({ name, email, ...otherPayload }) => console.log({ name, email, ...otherPayload }) || ({ name, email }))\r\n```\r\n![output](https://thepracticaldev.s3.amazonaws.com/i/a31o4cr8f3eobl2rknhd.png)\r\n\r\n\r\n**WHY?**, it is because `console.log` return `undefined`, and the browser will still running the code after `||`. \r\n\r\nYou can play around with these examples into devtool: \r\n - `undefined || 'return me'`.\r\n - `console.log('log me') || 'return me'`\r\n - `true && console.log('log me')`\r\n - `false && console.log('do not log me')`\r\n\r\n\r\nI hope you learned something  😁😁;",
    "positive_reactions_count": 7,
    "cover_image": null,
    "tag_list": [
      "javascript",
      "consolelog",
      "debugging"
    ],
    "canonical_url": "https://dev.to/azrizhaziq/tip-when-in-javascript-497f",
    "reading_time_minutes": 0,
    "user": {
      "name": "Azriz Jasni",
      "username": "azrizhaziq",
      "twitter_username": null,
      "github_username": "AzrizHaziq",
      "website_url": null,
      "profile_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--C2GJLJGy--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/86582/93c78063-72ac-4713-a4b9-0a7b2fa63de6.jpeg",
      "profile_image_90": "https://res.cloudinary.com/practicaldev/image/fetch/s--QKw4f0Eo--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/86582/93c78063-72ac-4713-a4b9-0a7b2fa63de6.jpeg"
    }
  }
]